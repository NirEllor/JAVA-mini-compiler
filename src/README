Ellor Waizner Nir, Pikman Yuli 
=============================
=   Main regex explanation   =
=============================

==== First regex ====

first regex: ^void ([\w]*)\s*\(([^)]*)\)

This regex is designed to match strings that corresponds to a function declaration.

This regex is designed to match and extract the structure of a function declaration.
We used it to firstly verify the format of function declaration, and then verified the inner parts
    of it.

1. ^ : Ensures the match begins at the start of the string.
2. void : Matches the literal keyword void, commonly used in programming to denote a function that
    doesn’t
return a value.
3. ([\w]*) Capturing Group 1 (([\w]*)) :
    [\w]: Matches any "word character" (letters a-z, A-Z, digits 0-9, or underscores _).
    *: Matches zero or more of these word characters.
    This group captures the function name.
4. \s* :
    \s: Matches any whitespace character (spaces, tabs, newlines, etc.).
    *: Matches zero or more whitespace characters.
    Purpose: Allows for optional spaces between the function name and the opening parenthesis (.
5. \( : Matches the literal opening parenthesis (, which marks the start of the function’s parameter
    list.
6. ([^)]*) : Capturing Group 2 (([^)]*)):
    [^)]: Matches any character that is not a closing parenthesis ).
    *: Matches zero or more of these characters.
    This group captures everything inside the parentheses (the parameter list), including arguments
    or an empty string if no parameters are present.
7. \) : Matches the literal closing parenthesis ).



==== Second regex ====

Second regex: ^(?!_+$)(?!__)[a-zA-Z0-9_]*$

We used it to validate legal variables names according to the instructions.

This regex is designed to match strings that:

1. Do not consist entirely of underscores (e.g., ______ is invalid).
2. Do not contain consecutive double underscores (e.g., __ is invalid anywhere in the string).
3. Contain only alphanumeric characters (a-z, A-Z, 0-9) and underscores (_).

1. ^ : This asserts the start of the string.

2. (?!_+$) :
    This is a negative lookahead. It ensures that the string does not match the pattern _+$.
    _+  matches one or more underscores. $ asserts the end of the string.
    Purpose: Prevents the string from being entirely composed of underscores (e.g., ____).

3. (?!__) :
    This is another negative lookahead. It ensures that the string does not contain __.
    __ matches exactly two consecutive underscores.
    Purpose: Prevents the string from containing double underscores anywhere.

4. [a-zA-Z0-9_]* :
    This matches zero or more characters from the set:
    a-z (lowercase letters)
    A-Z (uppercase letters)
    0-9 (digits)
    _ (underscore)
    Purpose: Ensures that the string contains only valid characters.

5. $ : This asserts the end of the string.

